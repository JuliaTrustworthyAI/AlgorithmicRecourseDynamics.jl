```{julia}
#| echo: false
include("docs/setup_docs.jl")
eval(setup_docs)
```

`AlgorithmicRecourseDynamics.jl` is a small package for modeling Algorithmic Recourse Dynamics. It builds on `CounterfactualExplanations`, a package for generating counterfactual explanations.

## Basic Usage

### Data and Model

```{julia}
N = 1000
xmax = 2
X, ys = make_blobs(
    N, 2; 
    centers=2, as_table=false, center_box=(-xmax => xmax), cluster_std=0.1
)
ys .= ys.==2
X = X'
counterfactual_data = CounterfactualData(X,ys')
```

```{julia}
n_epochs = 100
model = Chain(Dense(2,1))
mod = FluxModel(model)

generator = GenericGenerator()
```

```{julia}
#| output: true

data_train, data_test = Data.train_test_split(counterfactual_data)
Models.train(mod, data_train; n_epochs=n_epochs)
plt_original = plot(mod, counterfactual_data; zoom=0, colorbar=false)
display(plt_original)
```

### Simulation

```{julia}
models = Dict(:mymodel => mod)
generators = Dict(:wachter => generator)
experiment = set_up_experiment(data_train, data_test, models, generators)
```

```{julia}
#| output: true

run!(experiment)
```

```{julia}
#| output: true

new_data = experiment.recourse_systems[1][1].data
new_model = experiment.recourse_systems[1][1].model
plt_original = plot(new_model, new_data; zoom=0, colorbar=false)
```


## Related Research Paper 📝

The package was developed for a research project that investigates the dynamics of various counterfactual generators. 