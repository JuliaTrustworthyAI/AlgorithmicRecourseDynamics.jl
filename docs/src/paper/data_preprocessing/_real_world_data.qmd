---
title: Preprocessing Real-World Data
---

```{julia}
#| echo: false

include("docs/src/paper/setup.jl")
eval(setup)
output_path = output_dir("real_world")
www_path = www_dir("real_world")
data_path = data_dir("real_world")
```

## California Housing Data

Fetching the data using Python's `sklearn` (run this in the Python REPL):

```python
from sklearn.datasets import fetch_california_housing
df, y = fetch_california_housing(return_X_y=True, as_frame=True)
df["target"] = y.values
data_path = "dev/artifacts/upload/data/real_world"
import os
if not os.path.isdir(os.path.join(data_path,"raw")):
    os.makedirs(os.path.join(data_path,"raw"))
df.to_csv(os.path.join(data_path,"raw/cal_housing.csv"), index=False)
```

Loading the data into Julia session. 

```{julia}
df = CSV.read(joinpath(data_path, "raw/cal_housing.csv"), DataFrame)
# Target:
y = df.target
y = Float64.(y .>= median(y)); # binary target (positive outcome)
# Data:
df.target = y
```

Random undersampling to balance the data:

```{julia}
df_balanced = getobs(undersample(df, df.target;shuffle=true))[1]
```

All features are continuous:

```{julia}
schema(df_balanced)
```

Feature transformation:

```{julia}
transformer = Standardizer(count=true)
mach = MLJBase.fit!(machine(transformer, df_balanced[:,Not(:target)]))
X = MLJBase.transform(mach, df_balanced[:,Not(:target)])
schema(X)
```

Turning the data into `CounterfactualData`:

```{julia}
X = Matrix(X)
X = permutedims(X)
y = permutedims(df_balanced.target)
data = CounterfactualData(X,y)
```

Saving the data:

```{julia}
CSV.write(joinpath(data_path, "cal_housing.csv"), df_balanced)              # binary file
Serialization.serialize(joinpath(data_path,"cal_housing.jls"), data)        # CounterfactualData
```


## Give Me Some Credit

Loading and basic preprocessing:

```{julia}
df = CSV.read(joinpath(data_path, "raw/cs-training.csv"), DataFrame)
select!(df, Not([:Column1]))
rename!(df, :SeriousDlqin2yrs => :target)
mapcols!(x -> [ifelse(x_=="NA", missing, x_) for x_ in x], df)
dropmissing!(df)
mapcols!(x -> eltype(x) <: AbstractString ? parse.(Int, x) : x, df)
df.target .= map(y -> y == 0 ? 1 : 0, df.target)        # postive outcome = no delinquency
```

Balancing:

```{julia}
df_balanced = getobs(undersample(df, df.target;shuffle=true))[1]
```

All features are continuous:

```{julia}
schema(df_balanced)
```

Feature transformation:

```{julia}
transformer = Standardizer(count=true)
mach = MLJBase.fit!(machine(transformer, df_balanced[:,Not(:target)]))
X = MLJBase.transform(mach, df_balanced[:,Not(:target)])
schema(X)
```

Turning the data into `CounterfactualData`:

```{julia}
X = Matrix(X)
X = permutedims(X)
y = permutedims(df_balanced.target)
data = CounterfactualData(X,y)
```

Saving:

```{julia}
CSV.write(joinpath(data_path, "gmsc.csv"), df_balanced)         # binary file
Serialization.serialize(joinpath(data_path,"gmsc.jls"), data)   # CounterfactualData
```

## UCI Credit Card Default

Loading and basic preprocessing:

```{julia}
df = CSV.read(joinpath(data_path, "raw/UCI_Credit_Card.csv"), DataFrame)
select!(df, Not([:ID]))
rename!(df, "default.payment.next.month" => :target)
dropmissing!(df)
df.SEX = categorical(df.SEX)
df.EDUCATION = categorical(df.EDUCATION)
df.MARRIAGE = categorical(df.MARRIAGE)
mapcols!(x -> eltype(x) <: AbstractString ? parse.(Int, x) : x, df)
df.target .= map(y -> y == 0 ? 1 : 0, df.target)        # postive outcome = no default
```

Balancing:

```{julia}
df_balanced = getobs(undersample(df, df.target;shuffle=true))[1]
```

**Not** all features are continuous:

```{julia}
schema(df_balanced)
```

Feature transformation:

```{julia}
transformer = Standardizer(count=true) |> ContinuousEncoder()
mach = MLJBase.fit!(machine(transformer, df_balanced[:,Not(:target)]))
X = MLJBase.transform(mach, df_balanced[:,Not(:target)])
schema(X)
```

Categorical indices:

```{julia}
features_categorical = [
    [2,3],
    collect(4:10),
    collect(11:14)
]
```

Preparing for use with `CounterfactualExplanations.jl`:

```{julia}
X = Matrix(X)
X = permutedims(X)
y = permutedims(df_balanced.target)
data = CounterfactualData(
    X, y;
    features_categorical = features_categorical
)
```

Saving:

```{julia}
CSV.write(joinpath(data_path, "credit_default.csv"), df_balanced)         # binary file
Serialization.serialize(joinpath(data_path,"credit_default.jls"), data)   # CounterfactualData
```




