---
title: Experiments with Synthetic Data
jupyter: julia-1.7
---

```{julia}
using Pkg; Pkg.activate("dev")
```

```{julia}
include("dev/utils.jl")
using AlgorithmicRecourseDynamics
using CounterfactualExplanations, Flux, Plots, PlotThemes, Random, LaplaceRedux, LinearAlgebra
theme(:wong)
output_path = output_dir("synthetic")
www_path = www_dir("synthetic")
```

```{julia}
catalogue = AlgorithmicRecourseDynamics.Data.load_synthetic()
choices = [
    :linearly_separable, 
    :overlapping, 
    :plus_shaped, 
    :balanced_positive_clusters,
]
data_sets = filter(p -> p[1] in choices, catalogue)
```

```{julia}
models = [
    :LogisticRegression, 
    :FluxModel, 
    :FluxEnsemble,
]
generators = Dict(
    :Greedy=>GreedyGenerator(), 
    :Generic=>GenericGenerator(),
    :REVISE=>REVISEGenerator(),
    :DICE=>DiCEGenerator()
)
```

```{julia}
experiments = set_up_experiments(data_sets,models,generators)
```

```{julia}
plts = []
for (exp_name, exp) in experiments
    for (M_name, M) in exp.models
        plts = vcat(plts..., plot(M, exp.test_data, title="$exp_name;\n $M_name"))
    end
end
plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
savefig(plt, joinpath(www_path,"models_test_before.png"))
```

```{julia}
n_evals = 5
n_rounds = 50
evaluate_every = Int(round(n_rounds/n_evals))
n_folds = 5
using Serialization
results = run_experiments(experiments;save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds, n_folds=n_folds)
Serialization.serialize(joinpath(output_path,"results.jls"),results)
```

```{julia}
plts = []
for (exp_name, exp) in experiments
    for (M_name, M) in exp.models
        plts = vcat(plts..., plot(M, exp.test_data, title="$exp_name;\n $M_name"))
    end
end
plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
savefig(plt, joinpath(www_path,"models_test_after.png"))
```

```{julia}
using Serialization
results = Serialization.deserialize(joinpath(output_path,"results.jls"))
```

```{julia}
using Serialization
results = [Serialization.deserialize(joinpath(output_path,subfolder,"results.jls")) for subfolder in readdir(output_path)];
```


```{julia}
using Gadfly
plts = [plot(res) for res in values(results)]
```






