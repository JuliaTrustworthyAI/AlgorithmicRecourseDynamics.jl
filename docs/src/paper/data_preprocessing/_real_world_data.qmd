---
title: Preprocessing Real-World Data
---

```{julia}
#| echo: false

include("docs/src/paper/setup.jl")
eval(setup)
output_path = output_dir("real_world")
www_path = www_dir("real_world")
data_path = data_dir("real_world")
```

## California Housing Data

Fetching the data using Python's `sklearn` (run this in the Python REPL):

```python
from sklearn.datasets import fetch_california_housing
df, y = fetch_california_housing(return_X_y=True, as_frame=True)
df["target"] = y.values
data_path = "dev/artifacts/upload/data/real_world"
import os
if not os.path.isdir(os.path.join(data_path,"raw")):
    os.makedirs(os.path.join(data_path,"raw"))
df.to_csv(os.path.join(data_path,"raw/cal_housing.csv"), index=False)
```

Loading the data into Julia session:

```{julia}
df = CSV.read(joinpath(data_path, "raw/cal_housing.csv"), DataFrame)
# Features:
X = Matrix(df[:,Not(:target)])
dt = StatsBase.fit(ZScoreTransform, X, dims=1)
StatsBase.transform!(dt, X)
# Target:
y = df.target
y = Float64.(y .>= median(y)); # binary target
# Data:
df = DataFrame(X,:auto)
df.target = y
```

```{julia}
using MLUtils: undersample
# Make DataFrames.jl work
MLUtils.getobs(data::DataFrame, i) = data[i,:]
MLUtils.numobs(data::DataFrame) = nrow(data)
df_balanced = getobs(undersample(df, df.target;shuffle=true))
```

```{julia}
CSV.write(joinpath(data_path, "cal_housing.csv"), df)
```


## Give Me Some Credit

```{julia}
using CSV, DataFrames, Statistics, StatsBase
df = CSV.read(joinpath(data_path, "raw/cs-training.csv"), DataFrame)
select!(df, Not([:Column1]))
rename!(df, :SeriousDlqin2yrs => :target)
mapcols!(x -> [ifelse(x_=="NA", missing, x_) for x_ in x], df)
dropmissing!(df)
mapcols!(x -> eltype(x) <: AbstractString ? parse.(Int, x) : x, df)
# Features:
X = Matrix(df[:,Not(:target)])
dt = fit(ZScoreTransform, X, dims=1)
StatsBase.transform!(dt, X)
# Target:
y = df.target
# Data:
df = DataFrame(X,:auto)
df.target = y
```

```{julia}
using MLUtils
using MLUtils: undersample
# Make DataFrames.jl work
MLUtils.getobs(data::DataFrame, i) = data[i,:]
MLUtils.numobs(data::DataFrame) = nrow(data)
df_balanced = getobs(undersample(df, df.target;shuffle=true))
```

```{julia}
CSV.write(joinpath(data_path, "gmsc.csv"), df_balanced)
```

## UCI Credit Card Default

```{julia}
using CSV, DataFrames, Statistics, StatsBase
df = CSV.read(joinpath(data_path, "raw/UCI_Credit_Card.csv"), DataFrame)
select!(df, Not([:ID, :SEX, :EDUCATION, :MARRIAGE]))
rename!(df, "default.payment.next.month" => :target)
dropmissing!(df)
mapcols!(x -> eltype(x) <: AbstractString ? parse.(Int, x) : x, df)
# Features:
X = Matrix(df[:,Not(:target)])
dt = fit(ZScoreTransform, X, dims=1)
StatsBase.transform!(dt, X)
# Target:
y = df.target
# Data:
df = DataFrame(X,:auto)
df.target = y
```

```{julia}
using MLUtils
using MLUtils: undersample
# Make DataFrames.jl work
MLUtils.getobs(data::DataFrame, i) = data[i,:]
MLUtils.numobs(data::DataFrame) = nrow(data)
df_balanced = getobs(undersample(df, df.target;shuffle=true))
```

```{julia}
CSV.write(joinpath(data_path, "credit_default.csv"), df_balanced)
```




