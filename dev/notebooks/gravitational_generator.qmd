---
title: Experiments with Housing Data
jupyter: julia-1.7
---

```{julia}
using Pkg; Pkg.activate("dev")
```

```{julia}
include("dev/utils.jl")
using AlgorithmicRecourseDynamics
using CounterfactualExplanations, Flux, Plots, PlotThemes, Random, LaplaceRedux, LinearAlgebra
theme(:wong)
output_path = output_dir("generator")
www_path = www_dir("generator")
```

# `GravitationalGenerator`

```{julia}
using MLJ
N = 1000
X, ys = make_blobs(N, 2; centers=2, as_table=false, center_box=(-5 => 5), cluster_std=0.5)
ys .= ys.==2
X = X'
xs = Flux.unstack(X,2)
data = zip(xs,ys)
counterfactual_data = CounterfactualData(X,ys')
```

```{julia}
using Flux
nn = Chain(Dense(2,1))
using Flux.Optimise: update!, ADAM
opt = ADAM()
epochs = 100
loss(x, y) = Flux.Losses.logitbinarycrossentropy(nn(x), y)
avg_loss(data) = mean(map(d -> loss(d[1],d[2]), data))
show_every = epochs/10
for epoch = 1:epochs
  for d in data
    gs = gradient(Flux.params(nn)) do
      l = loss(d...)
    end
    update!(opt, Flux.params(nn), gs)
  end
  if epoch % show_every == 0
    println("Epoch " * string(epoch))
    @show avg_loss(data)
  end
end
```

```{julia}
M = FluxModel(nn)
```

```{julia}
x = select_factual(counterfactual_data, rand(1:size(X)[2])) 
y = round(probs(M, x)[1])
target = ifelse(y==1.0,0.0,1.0) # opposite label as target
T = 100
```

```{julia}
Λ₂ = [0.1, 1, 5]
counterfactuals = []
generators = []
for λ₂ ∈ Λ₂  
    λ = [0.1, λ₂]
    generator = GravitationalGenerator(λ=λ)
    generators = vcat(generators..., generator)
    counterfactuals = vcat(
      counterfactuals...,
      generate_counterfactual(x, target, counterfactual_data, M, generator; convergence=:strict, T=T)
    )
end
```

```{julia}
theme(:wong)
T_ = 500
plts = []
for i ∈ 1:length(Λ₂)
    λ₂ = Λ₂[i]
    counterfactual = counterfactuals[i]  
    plt = plot(counterfactual, plot_up_to=minimum([T,T_]), title="λ₂=$(λ₂)")
    x1,x2 = generators[i].centroid[1], generators[i].centroid[2]
    scatter!(plt, [x1], [x2], colour=:purple, label="attractor")
    plts = vcat(plts..., plt)
end
plt = plot(plts..., size=(1200,300), layout=(1,3))
savefig(plt, joinpath(www_path,"gravitational_generator_strict.png"))
```

![Generating diverse counterfactuals through `GravitationalGenerator`. The magnitude of attraction ($\lambda_2) increases from left to right.](../artifacts/upload/www/generator/gravitational_generator_strict.png){#fig-strict}

```{julia}
Λ₂ = [0.1, 1, 5]
counterfactuals = []
generators = []
for λ₂ ∈ Λ₂  
    λ = [0.1, λ₂]
    generator = GravitationalGenerator(λ=λ)
    generators = vcat(generators..., generator)
    counterfactuals = vcat(
      counterfactuals...,
      generate_counterfactual(x, target, counterfactual_data, M, generator)
    )
end
```

```{julia}
theme(:wong)
T_ = 500
plts = []
for i ∈ 1:length(Λ₂)
    λ₂ = Λ₂[i]
    counterfactual = counterfactuals[i]  
    plt = plot(counterfactual, plot_up_to=minimum([T,T_]), title="λ₂=$(λ₂)")
    x1,x2 = generators[i].centroid[1], generators[i].centroid[2]
    scatter!(plt, [x1], [x2], colour=:purple, label="attractor")
    plts = vcat(plts..., plt)
end
plt = plot(plts..., size=(1400,300), layout=(1,3))
savefig(plt, joinpath(www_path,"gravitational_generator.png"))
```

![Generating diverse counterfactuals through `GravitationalGenerator`, but converging when threshold is reached. The magnitude of attraction ($\lambda_2) increases from left to right.](../artifacts/upload/www/generator/gravitational_generator.png){#fig-conventional}

```{julia}

```


# References
