var documenterSearchIndex = {"docs":
[{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"CurrentModule = AlgorithmicRecourseDynamics","category":"page"},{"location":"_reference/#Reference","page":"🧐 Reference","title":"Reference","text":"","category":"section"},{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"In this reference you will find a detailed overview of the package API.","category":"page"},{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"Reference guides are technical descriptions of the machinery and how to operate it. Reference material is information-oriented.–- Diátaxis","category":"page"},{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"In other words, you come here because you want to take a very close look at the code 🧐","category":"page"},{"location":"_reference/#Content","page":"🧐 Reference","title":"Content","text":"","category":"section"},{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"Pages = [\"_reference.md\"]","category":"page"},{"location":"_reference/#Index","page":"🧐 Reference","title":"Index","text":"","category":"section"},{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"","category":"page"},{"location":"_reference/#Public-Interface","page":"🧐 Reference","title":"Public Interface","text":"","category":"section"},{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"Modules = [\n    AlgorithmicRecourseDynamics\n]\nPrivate = false","category":"page"},{"location":"_reference/#AlgorithmicRecourseDynamics.run_experiment-Tuple{AlgorithmicRecourseDynamics.Experiments.Experiment}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.run_experiment","text":"run_experiment(\n    experiment::Experiment; evaluate_every::Int=2,\n    save_path::Union{Nothing,String}=nothing,\n    save_name::Union{Nothing,String}=nothing,\n    kwargs...\n)\n\nRuns a given experiment and saves the results if specified.\n\n\n\n\n\n","category":"method"},{"location":"_reference/#AlgorithmicRecourseDynamics.run_experiment-Tuple{CounterfactualExplanations.DataPreprocessing.CounterfactualData, Union{Dict{Symbol, <:CounterfactualExplanations.AbstractFittedModel}, Vector{Symbol}}, Dict{Symbol, <:CounterfactualExplanations.AbstractGenerator}}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.run_experiment","text":"run_experiment(\n    data::CounterfactualData,\n    models::Dict{Symbol, <: CounterfactualExplanations.Models.AbstractFittedModel},\n    generators::Dict{Symbol, <: CounterfactualExplanations.Generators.AbstractGenerator};\n    target::Int=1,\n    num_counterfactuals::Int=5,\n    evaluate_every::Int=2,\n    pre_train_models::Union{Nothing,Int}=100,\n    save_path::Union{Nothing,String}=nothing,\n    save_name::Union{Nothing,String}=nothing,\n    kwargs...\n)\n\nSets up one experiment for the provided data, models and generators and then runs it. Saves results if specified. Models and generators need to be supplied as dictionaries, where values need to be of type CounterfactualExplanations.Models.AbstractFittedModel and CounterfactualExplanations.Generators.AbstractGenerator, respectively.\n\n\n\n\n\n","category":"method"},{"location":"_reference/#AlgorithmicRecourseDynamics.run_experiments-Tuple{Dict{Symbol, AlgorithmicRecourseDynamics.Experiments.Experiment}}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.run_experiments","text":"function run_experiments(\n    experiments::Dict{Symbol, Experiment};\n    evaluate_every::Int=2,\n    save_path::Union{Nothing,String}=nothing,\n    kwargs...\n)\n\nRuns multiple provided experiments.\n\n\n\n\n\n","category":"method"},{"location":"_reference/#AlgorithmicRecourseDynamics.run_experiments-Tuple{Dict{Symbol, CounterfactualExplanations.DataPreprocessing.CounterfactualData}, Union{Dict{Symbol, <:CounterfactualExplanations.AbstractFittedModel}, Vector{Symbol}}, Dict{Symbol, <:CounterfactualExplanations.AbstractGenerator}}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.run_experiments","text":"run_experiments(\n    catalogue::Dict{Symbol, CounterfactualData},\n    models::Union{Dict{Symbol, <: CounterfactualExplanations.Models.AbstractFittedModel},Vector{Symbol}},\n    generators::Dict{Symbol, <: CounterfactualExplanations.Generators.AbstractGenerator};\n    target::Int=1,\n    num_counterfactuals::Int=5,\n    evaluate_every::Int=2,\n    pre_train_models::Union{Nothing, Int}=100,\n    save_path::Union{Nothing,String}=nothing,\n    kwargs...\n)\n\nSets up and runs experiments for multiple data sets.\n\n\n\n\n\n","category":"method"},{"location":"_reference/#AlgorithmicRecourseDynamics.set_up_experiment-Tuple{CounterfactualExplanations.DataPreprocessing.CounterfactualData, CounterfactualExplanations.DataPreprocessing.CounterfactualData, Dict{Symbol, <:CounterfactualExplanations.AbstractFittedModel}, Dict{Symbol, <:CounterfactualExplanations.AbstractGenerator}}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.set_up_experiment","text":"set_up_experiment(\n    data::CounterfactualData,\n    models::Dict{Symbol, <: CounterfactualExplanations.Models.AbstractFittedModel},\n    generators::Dict{Symbol, <: CounterfactualExplanations.Generators.AbstractGenerator};\n    target::Int=1,\n    num_counterfactuals::Int=5,\n    pre_train_models::Union{Nothing,Int}=100,\n    kwargs...\n)\n\nSets up one experiment for the provided data, models and generators.\n\n\n\n\n\n","category":"method"},{"location":"_reference/#AlgorithmicRecourseDynamics.set_up_experiment-Tuple{CounterfactualExplanations.DataPreprocessing.CounterfactualData, Vector{Symbol}, Dict{Symbol, <:CounterfactualExplanations.AbstractGenerator}}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.set_up_experiment","text":"set_up_experiment(\n    data::CounterfactualData,\n    models::Dict{Symbol, <: CounterfactualExplanations.Models.AbstractFittedModel},\n    generators::Dict{Symbol, <: CounterfactualExplanations.Generators.AbstractGenerator};\n    target::Int=1,\n    num_counterfactuals::Int=5,\n    pre_train_models::Union{Nothing,Int}=100,\n    kwargs...\n)\n\nSets up one experiment for the provided data, models and generators.\n\n\n\n\n\n","category":"method"},{"location":"_reference/#AlgorithmicRecourseDynamics.set_up_experiments-Tuple{Dict{Symbol, CounterfactualExplanations.DataPreprocessing.CounterfactualData}, Union{Dict{Symbol, <:CounterfactualExplanations.AbstractFittedModel}, Vector{Symbol}}, Dict{Symbol, <:CounterfactualExplanations.AbstractGenerator}}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.set_up_experiments","text":"function set_up_experiments(\n    catalogue::Dict{Symbol, CounterfactualData},\n    models::Union{Dict{Symbol, <: CounterfactualExplanations.Models.AbstractFittedModel},Vector{Symbol}},\n    generators::Dict{Symbol, <: CounterfactualExplanations.Generators.AbstractGenerator};\n    target::Int=1,\n    num_counterfactuals::Int=5,\n    pre_train_models::Union{Nothing, Int}=100,\n    kwargs...\n)\n\nSets up multiple experiments.\n\n\n\n\n\n","category":"method"},{"location":"_reference/#Internal-functions","page":"🧐 Reference","title":"Internal functions","text":"","category":"section"},{"location":"_reference/","page":"🧐 Reference","title":"🧐 Reference","text":"Modules = [\n    AlgorithmicRecourseDynamics\n]\nPublic = false","category":"page"},{"location":"_reference/#AlgorithmicRecourseDynamics.run!-Tuple{AlgorithmicRecourseDynamics.Experiments.Experiment}","page":"🧐 Reference","title":"AlgorithmicRecourseDynamics.run!","text":"run!(experiment::Experiment, generator::CounterfactualExplanations.AbstractGenerator, n_folds=5; seed=nothing, T=1000)\n\nA wrapper function that runs the experiment for endogenous models shifts.\n\n\n\n\n\n","category":"method"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"CurrentModule = AlgorithmicRecourseDynamics","category":"page"},{"location":"#AlgorithmicRecourseDynamics","page":"🏠 Home","title":"AlgorithmicRecourseDynamics","text":"","category":"section"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"Documentation for AlgorithmicRecourseDynamics.jl.","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"AlgorithmicRecourseDynamics.jl is a small package for modeling Algorithmic Recourse Dynamics. It builds on CounterfactualExplanations, a package for generating counterfactual explanations.","category":"page"},{"location":"#Basic-Usage","page":"🏠 Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"Below we first generate some synthetic data for a binary classification task and instantiate an instance of CounterfactualData.","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"N = 1000\nxmax = 2\nX, ys = make_blobs(\n    N, 2; \n    centers=2, as_table=false, center_box=(-xmax => xmax), cluster_std=0.1\n)\nys .= ys.==2\nX = X'\ncounterfactual_data = CounterfactualData(X,ys')","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"We then define a simple model for the task and prepare it for use with CounterfactualExplanations.jl:","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"n_epochs = 100\nmodel = Chain(Dense(2,1))\nmod = FluxModel(model)","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"To generate algorithmic recourse, we will use a simple generic generator:","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"generator = GenericGenerator()","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"Finally we train our model on a subset of the data. The chart below shows the results.","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"data_train, data_test = Data.train_test_split(counterfactual_data)\nCounterfactualExplanations.Models.train(mod, data_train; n_epochs=n_epochs)\nplt_original = plot(mod, counterfactual_data; zoom=0, colorbar=false)\ndisplay(plt_original)","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"(Image: )","category":"page"},{"location":"#Simulation","page":"🏠 Home","title":"Simulation","text":"","category":"section"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"To model the dynamics of algorithmic recourse, we use simulations, in which we repeatedly select as subset of individuals from the non-target class, generate and implement recourse for all of them and finally retrain the model. To set this experiment up, we can use the code below:","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"models = Dict(:mymodel => mod)\ngenerators = Dict(:wachter => generator)\nexperiment = set_up_experiment(data_train, data_test, models, generators)","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"Finally, we just run the experiment using default parameter settings that specify the number of rounds, the proportion of individuals to select for recourse and related aspects:","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"run!(experiment)","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"The chart below shows the data and predictions at the end of the simulation:","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"new_data = experiment.recourse_systems[1][1].data\nnew_model = experiment.recourse_systems[1][1].model\nplt_original = plot(new_model, new_data; zoom=0, colorbar=false)","category":"page"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"(Image: )","category":"page"},{"location":"#Related-Research-Paper","page":"🏠 Home","title":"Related Research Paper 📝","text":"","category":"section"},{"location":"","page":"🏠 Home","title":"🏠 Home","text":"The package was developed for a research project that investigates the dynamics of various counterfactual generators. You can find the details here.","category":"page"}]
}
