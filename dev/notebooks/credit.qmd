---
title: Experiments with Credit Data
jupyter: julia-1.7
---

```{julia}
using Pkg; Pkg.activate("dev")
```

```{julia}
include("dev/utils.jl")
using AlgorithmicRecourseDynamics
using CounterfactualExplanations, Flux, Plots, PlotThemes, Random, LaplaceRedux, LinearAlgebra
theme(:wong)
output_path = output_dir("real_world")
www_path = www_dir("real_world")
```

```{julia}
catalogue = AlgorithmicRecourseDynamics.Data.load_real_world()
choices = [:give_me_some_credit_balanced]
data_sets = filter(p -> p[1] in choices, catalogue)
```

```{julia}
using CounterfactualExplanations.DataPreprocessing: unpack
bs = 50
function data_loader(data::CounterfactualData)
    X, y = unpack(data)
    data = Flux.DataLoader((X,y),batchsize=bs)
    return data
end
model_params = (batch_norm=false,n_hidden=128,dropout=true,p_dropout=0.3)
```


```{julia}
models = [:FluxModel, :FluxEnsemble]
generators = Dict(
    :Greedy=>GreedyGenerator(), 
    :Generic=>GenericGenerator(),
    :REVISE=>REVISEGenerator(),
    :DICE=>DiCEGenerator()
)
```

```{julia}
experiments = set_up_experiments(data_sets,models,generators; pre_train_models=100, model_params=model_params, data_loader=data_loader)
```

```{julia}
plts = []
for (exp_name, exp) in experiments
    for (M_name, M) in exp.models
        plts = vcat(plts..., plot(M, exp.test_data, title="$exp_name;\n $M_name"))
    end
end
plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
savefig(plt, joinpath(www_path,"models_test_before.png"))
```

```{julia}
n_rounds = 10
evaluate_every = n_rounds/5
using Serialization
results = run_experiments(experiments;save_path=output_path,evaluate_every=evaluate_every,n_rounds=n_rounds)
Serialization.serialize(joinpath(output_path,"results.bson"),results)
```

```{julia}
plts = []
for (exp_name, exp) in experiments
    for (M_name, M) in exp.models
        plts = vcat(plts..., plot(M, exp.test_data, title="$exp_name;\n $M_name"))
    end
end
plt = plot(plts..., layout=(length(choices),length(models)),size=(length(choices)*300,length(models)*300))
savefig(plt, joinpath(www_path,"models_test_after.png"))
```

```{julia}
using Serialization
Serialization.deserialize(joinpath(output_path,"results.bson"),results)
using Gadfly
plts = [plot(res) for res in values(results)]
gridstack(reshape(plts,2,2))
```






